#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
"""

import json
from langchain_chroma import Chroma
from langchain_huggingface import HuggingFaceEmbeddings

def load_vectorstore():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å"""
    embeddings = HuggingFaceEmbeddings(
        model_name="all-mpnet-base-v2",
        model_kwargs={'device': 'cpu'},
        encode_kwargs={'normalize_embeddings': True}
    )
    
    vectorstore = Chroma(
        persist_directory="./chroma_db",
        embedding_function=embeddings
    )
    
    return vectorstore

def test_queries(vectorstore):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
    test_cases = [
        {
            "query": "–ö—Ç–æ —Ç–∞–∫–æ–π Xarn Velgor?",
            "description": "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–ª–∞–≤–Ω–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"
        },
        {
            "query": "–ß—Ç–æ —Ç–∞–∫–æ–µ Synth Flux?",
            "description": "–ü–æ–∏—Å–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ –ø–æ–Ω—è—Ç–∏—è"
        },
        {
            "query": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –±–∏—Ç–≤–µ –Ω–∞ Krael",
            "description": "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏"
        },
        {
            "query": "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç Wardens?",
            "description": "–ü–æ–∏—Å–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        },
        {
            "query": "–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è Aurelia Prime?",
            "description": "–ü–æ–∏—Å–∫ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        },
        {
            "query": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Lumen Blade?",
            "description": "–ü–æ–∏—Å–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π"
        },
        {
            "query": "–ö—Ç–æ —Ç–∞–∫–∏–µ Wardens?",
            "description": "–ü–æ–∏—Å–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
        },
        {
            "query": "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ Echo Wars?",
            "description": "–ü–æ–∏—Å–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        }
    ]
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê –ü–û –í–ï–ö–¢–û–†–ù–û–ú–£ –ò–ù–î–ï–ö–°–£")
    print("=" * 60)
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. {test_case['description']}")
        print(f"   –ó–∞–ø—Ä–æ—Å: '{test_case['query']}'")
        print("-" * 40)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results = vectorstore.similarity_search(test_case['query'], k=3)
        
        for j, result in enumerate(results, 1):
            print(f"   {j}. –ò—Å—Ç–æ—á–Ω–∏–∫: {result.metadata['source']}")
            print(f"      –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result.metadata['category']}")
            print(f"      –ß–∞–Ω–∫: {result.metadata['chunk_id']}")
            print(f"      –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: {len(result.page_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"      –ü–æ–∑–∏—Ü–∏—è: {result.metadata.get('chunk_index', 'N/A')} –∏–∑ {result.metadata.get('total_chunks', 'N/A')}")
            print(f"      –¢–µ–∫—Å—Ç:")
            print(f"      {result.page_content}")
            print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...")
        vectorstore = load_vectorstore()
        print("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        test_queries(vectorstore)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–¥–µ–∫—Å–∞
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ù–î–ï–ö–°–ê:")
        print(f"   –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: {vectorstore._collection.count()}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é build_index.py")

if __name__ == "__main__":
    main()

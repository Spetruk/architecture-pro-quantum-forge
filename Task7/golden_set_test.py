#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG-–±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é "–∑–æ–ª–æ—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞" –≤–æ–ø—Ä–æ—Å–æ–≤
–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–º—ã
"""

import json
import time
import uuid
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any, Optional
import re

import sys
sys.path.append('app')
from dotenv import load_dotenv
from rag_bot import RAGBot, RAGConfig

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('app/.env')


class GoldenSetTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ RAG-–±–æ—Ç–∞ —Å –∑–æ–ª–æ—Ç—ã–º –Ω–∞–±–æ—Ä–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, config: RAGConfig):
        self.config = config
        self.bot = RAGBot(config, enable_logging=False)  # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.test_id = str(uuid.uuid4())[:8]
        
        # –ó–æ–ª–æ—Ç–æ–π –Ω–∞–±–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤
        self.golden_questions = self._create_golden_set()
        
    def _create_golden_set(self) -> List[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–æ–ª–æ—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        
        return [
            # === –í–û–ü–†–û–°–´ –ù–ê –ò–ó–í–ï–°–¢–ù–´–ï –¢–ï–ú–´ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã) ===
            {
                "id": "known_01",
                "question": "–ö—Ç–æ —Ç–∞–∫–æ–π Arin Solara?",
                "category": "characters",
                "expected_type": "success",
                "expected_keywords": ["arin solara", "–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å", "–ø–µ—Ä—Å–æ–Ω–∞–∂"],
                "description": "–û—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            },
            {
                "id": "known_02", 
                "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ Lumen Blade?",
                "category": "technologies",
                "expected_type": "success",
                "expected_keywords": ["lumen blade", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "–æ—Ä—É–∂–∏–µ"],
                "description": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"
            },
            {
                "id": "known_03",
                "question": "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ Krael",
                "category": "locations",
                "expected_type": "success", 
                "expected_keywords": ["krael", "–º–µ—Å—Ç–æ", "–ª–æ–∫–∞—Ü–∏—è"],
                "description": "–õ–æ–∫–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"
            },
            {
                "id": "known_04",
                "question": "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤–æ –≤—Ä–µ–º—è Echo Wars?",
                "category": "events",
                "expected_type": "success",
                "expected_keywords": ["echo wars", "–≤–æ–π–Ω–∞", "—Å–æ–±—ã—Ç–∏–µ"],
                "description": "–í–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏"
            },
            {
                "id": "known_05",
                "question": "–ö—Ç–æ —Ç–∞–∫–æ–π Eldar Voss?",
                "category": "characters",
                "expected_type": "success",
                "expected_keywords": ["eldar voss", "–ø–µ—Ä—Å–æ–Ω–∞–∂"],
                "description": "–ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"
            },
            {
                "id": "known_06",
                "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ Rift Engine?",
                "category": "technologies", 
                "expected_type": "success",
                "expected_keywords": ["rift engine", "–¥–≤–∏–≥–∞—Ç–µ–ª—å", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è"],
                "description": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"
            },
            {
                "id": "known_07",
                "question": "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ Aurelia Prime",
                "category": "locations",
                "expected_type": "success",
                "expected_keywords": ["aurelia prime", "–ø–ª–∞–Ω–µ—Ç–∞", "–º–µ—Å—Ç–æ"],
                "description": "–ü–ª–∞–Ω–µ—Ç–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"
            },
            {
                "id": "known_08",
                "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ Siege of Krael?",
                "category": "events",
                "expected_type": "success", 
                "expected_keywords": ["siege", "krael", "–æ—Å–∞–¥–∞"],
                "description": "–°–æ–±—ã—Ç–∏–µ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"
            },
            
            # === –í–û–ü–†–û–°–´ –ù–ê –£–î–ê–õ–ï–ù–ù–´–ï/–û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –¢–ï–ú–´ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–∞–∑—ã) ===
            {
                "id": "unknown_01",
                "question": "–ö—Ç–æ —Ç–∞–∫–æ–π Xarn Velgor?",
                "category": "removed_entities",
                "expected_type": "failure",
                "expected_keywords": ["–Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "–Ω–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"],
                "description": "–£–¥–∞–ª–µ–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å - –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç–≤–µ—á–∞—Ç—å"
            },
            {
                "id": "unknown_02", 
                "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ Synth Flux?",
                "category": "removed_entities",
                "expected_type": "failure",
                "expected_keywords": ["–Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "–Ω–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"],
                "description": "–£–¥–∞–ª–µ–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å - –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç–≤–µ—á–∞—Ç—å"
            },
            {
                "id": "unknown_03",
                "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ Void Core?", 
                "category": "removed_entities",
                "expected_type": "failure",
                "expected_keywords": ["–Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "–Ω–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"],
                "description": "–£–¥–∞–ª–µ–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å - –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç–≤–µ—á–∞—Ç—å"
            },
            {
                "id": "unknown_04",
                "question": "–ö—Ç–æ —Ç–∞–∫–æ–π Darth Vader?",
                "category": "external_knowledge",
                "expected_type": "failure", 
                "expected_keywords": ["–Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "–Ω–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"],
                "description": "–í–Ω–µ—à–Ω–∏–µ –∑–Ω–∞–Ω–∏—è - –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç–≤–µ—á–∞—Ç—å"
            },
            {
                "id": "unknown_05",
                "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ Death Star?",
                "category": "external_knowledge",
                "expected_type": "failure",
                "expected_keywords": ["–Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "–Ω–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"],
                "description": "–í–Ω–µ—à–Ω–∏–µ –∑–Ω–∞–Ω–∏—è - –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç–≤–µ—á–∞—Ç—å"
            }
        ]
    
    def _evaluate_response(self, question_data: Dict[str, Any], response: str, 
                          chunks_found: int) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞"""
        
        expected_type = question_data["expected_type"]
        expected_keywords = question_data["expected_keywords"]
        response_lower = response.lower()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ç–∫–∞–∑–∞
        failure_patterns = [
            r"–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π",
            r"–Ω–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤.*–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            r"–Ω–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤.*–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ", 
            r"–Ω–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤.*–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö",
            r"–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.*–Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            r"–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.*–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
            r"–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            r"–Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏"
        ]
        
        is_refusal = any(re.search(pattern, response_lower) for pattern in failure_patterns)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        keyword_matches = sum(1 for keyword in expected_keywords 
                            if keyword.lower() in response_lower)
        keyword_coverage = keyword_matches / len(expected_keywords) if expected_keywords else 0
        
        # –û—Ü–µ–Ω–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
        if expected_type == "success":
            # –î–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫–∞–∑–∞ –∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            is_correct = not is_refusal and keyword_coverage > 0.3 and chunks_found > 0
            completeness = min(keyword_coverage, 1.0)
        else:
            # –î–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–∞–∑
            is_correct = is_refusal
            completeness = 1.0 if is_refusal else 0.0
        
        return {
            "correct": is_correct,
            "completeness": completeness,
            "is_refusal": is_refusal,
            "keyword_coverage": keyword_coverage,
            "keyword_matches": keyword_matches,
            "chunks_found": chunks_found,
            "response_length": len(response)
        }
    
    def run_test(self, technique: str = "base") -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        print(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG-–±–æ—Ç–∞ (—Ç–µ—Ö–Ω–∏–∫–∞: {technique})")
        print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä: {len(self.golden_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
        print("-" * 60)
        
        results = []
        start_time = time.time()
        
        for i, question_data in enumerate(self.golden_questions, 1):
            print(f"[{i:2d}/{len(self.golden_questions)}] {question_data['question']}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
            bot_response = self.bot.generate_response(question_data["question"], technique)
            
            # –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞
            evaluation = self._evaluate_response(
                question_data, 
                bot_response["response"], 
                bot_response["num_sources"]
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result = {
                "timestamp": datetime.now().isoformat(),
                "test_id": self.test_id,
                "question_id": question_data["id"],
                "question": question_data["question"],
                "category": question_data["category"],
                "expected_type": question_data["expected_type"],
                "technique": technique,
                "response": bot_response["response"],
                "sources": [s["source"] for s in bot_response["sources"]],
                "evaluation": evaluation
            }
            results.append(result)
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            status = "‚úÖ" if evaluation["correct"] else "‚ùå"
            print(f"    {status} {evaluation['completeness']:.1%} –ø–æ–ª–Ω–æ—Ç–∞ | "
                  f"{evaluation['chunks_found']} —á–∞–Ω–∫–æ–≤ | "
                  f"{'–æ—Ç–∫–∞–∑' if evaluation['is_refusal'] else '–æ—Ç–≤–µ—Ç'}")
            
            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        total_time = time.time() - start_time
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        stats = self._calculate_statistics(results)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._save_results(results, stats, technique, total_time)
        
        # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤
        self._print_summary(stats, total_time)
        
        return {
            "results": results,
            "statistics": stats,
            "test_metadata": {
                "test_id": self.test_id,
                "technique": technique,
                "total_time": total_time,
                "questions_count": len(self.golden_questions)
            }
        }
    
    def _calculate_statistics(self, results: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"""
        
        total = len(results)
        correct_count = sum(1 for r in results if r["evaluation"]["correct"])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤
        success_questions = [r for r in results if r["expected_type"] == "success"]
        failure_questions = [r for r in results if r["expected_type"] == "failure"]
        
        success_correct = sum(1 for r in success_questions if r["evaluation"]["correct"])
        failure_correct = sum(1 for r in failure_questions if r["evaluation"]["correct"])
        
        # –°—Ä–µ–¥–Ω—è—è –ø–æ–ª–Ω–æ—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤
        avg_completeness = sum(r["evaluation"]["completeness"] for r in results) / total
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for result in results:
            cat = result["category"]
            if cat not in categories:
                categories[cat] = {"total": 0, "correct": 0}
            categories[cat]["total"] += 1
            if result["evaluation"]["correct"]:
                categories[cat]["correct"] += 1
        
        for cat in categories:
            categories[cat]["accuracy"] = categories[cat]["correct"] / categories[cat]["total"]
        
        return {
            "overall_accuracy": correct_count / total,
            "total_questions": total,
            "correct_answers": correct_count,
            "success_questions": {
                "total": len(success_questions),
                "correct": success_correct,
                "accuracy": success_correct / len(success_questions) if success_questions else 0
            },
            "failure_questions": {
                "total": len(failure_questions), 
                "correct": failure_correct,
                "accuracy": failure_correct / len(failure_questions) if failure_questions else 0
            },
            "average_completeness": avg_completeness,
            "categories": categories
        }
    
    def _save_results(self, results: List[Dict[str, Any]], stats: Dict[str, Any], 
                     technique: str, total_time: float):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_dir = Path("test_results")
        results_dir.mkdir(exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        results_file = results_dir / f"golden_set_test_{technique}_{timestamp}.json"
        
        test_data = {
            "metadata": {
                "test_id": self.test_id,
                "timestamp": datetime.now().isoformat(),
                "technique": technique,
                "total_time": total_time,
                "questions_count": len(self.golden_questions)
            },
            "statistics": stats,
            "detailed_results": results
        }
        
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(test_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
    
    def _print_summary(self, stats: Dict[str, Any], total_time: float):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("="*60)
        
        print(f"üéØ –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {stats['overall_accuracy']:.1%} "
              f"({stats['correct_answers']}/{stats['total_questions']})")
        
        print(f"‚úÖ –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–º—ã: {stats['success_questions']['accuracy']:.1%} "
              f"({stats['success_questions']['correct']}/{stats['success_questions']['total']})")
        
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–º—ã: {stats['failure_questions']['accuracy']:.1%} "
              f"({stats['failure_questions']['correct']}/{stats['failure_questions']['total']})")
        
        print(f"üìà –°—Ä–µ–¥–Ω—è—è –ø–æ–ª–Ω–æ—Ç–∞: {stats['average_completeness']:.1%}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_time:.1f} —Å–µ–∫")
        
        print(f"\nüìÇ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category, cat_stats in stats['categories'].items():
            print(f"  {category}: {cat_stats['accuracy']:.1%} "
                  f"({cat_stats['correct']}/{cat_stats['total']})")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è RAG-–±–æ—Ç–∞
    config = RAGConfig(vector_db_path="chroma_db")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞
    tester = GoldenSetTester(config)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫
    techniques = ["base", "few_shot", "chain_of_thought"]
    
    for technique in techniques:
        print(f"\n{'='*60}")
        print(f"üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–•–ù–ò–ö–ò: {technique.upper()}")
        print('='*60)
        
        try:
            results = tester.run_test(technique)
            
            print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {technique} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {technique}: {e}")
        
        print("\n" + "-"*60)
        time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Ö–Ω–∏–∫–∞–º–∏


if __name__ == "__main__":
    main()

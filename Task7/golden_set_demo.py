#!/usr/bin/env python3
"""
–î–ï–ú–û: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è "–∑–æ–ª–æ—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞" 
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –≤—ã–≥–ª—è–¥–µ–ª–∏ –±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ —Ä–∞–±–æ—á–µ–º API
"""

import json
from datetime import datetime
from pathlib import Path

def create_demo_results():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    demo_results = {
        "metadata": {
            "test_id": "demo_123",
            "timestamp": datetime.now().isoformat(),
            "technique": "base",
            "total_time": 12.5,
            "questions_count": 13
        },
        "statistics": {
            "overall_accuracy": 0.846,  # 11/13
            "total_questions": 13,
            "correct_answers": 11,
            "success_questions": {
                "total": 8,
                "correct": 8,  # –í—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–º—ã –æ—Ç–≤–µ—á–µ–Ω—ã –≤–µ—Ä–Ω–æ
                "accuracy": 1.0
            },
            "failure_questions": {
                "total": 5,
                "correct": 3,  # 3 –∏–∑ 5 –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã
                "accuracy": 0.6
            },
            "average_completeness": 0.823,
            "categories": {
                "characters": {"total": 2, "correct": 2, "accuracy": 1.0},
                "technologies": {"total": 2, "correct": 2, "accuracy": 1.0},
                "locations": {"total": 2, "correct": 2, "accuracy": 1.0},
                "events": {"total": 2, "correct": 2, "accuracy": 1.0},
                "removed_entities": {"total": 3, "correct": 3, "accuracy": 1.0},
                "external_knowledge": {"total": 2, "correct": 0, "accuracy": 0.0}
            }
        },
        "detailed_results": [
            # –£—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–º—ã
            {
                "question_id": "known_01",
                "question": "–ö—Ç–æ —Ç–∞–∫–æ–π Arin Solara?",
                "category": "characters",
                "expected_type": "success",
                "response": "Arin Solara - —ç—Ç–æ –æ–ø—ã—Ç–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –∏ —á–ª–µ–Ω —ç–∫—Å–ø–µ–¥–∏—Ü–∏–æ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã. –û–Ω –∏–∑–≤–µ—Å—Ç–µ–Ω —Å–≤–æ–∏–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —É—á–∞—Å—Ç–∏–µ–º –≤ –∫–ª—é—á–µ–≤—ã—Ö –º–∏—Å—Å–∏—è—Ö.",
                "evaluation": {
                    "correct": True,
                    "completeness": 0.95,
                    "is_refusal": False,
                    "keyword_coverage": 0.8,
                    "chunks_found": 5
                }
            },
            {
                "question_id": "known_02",
                "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ Lumen Blade?",
                "category": "technologies",
                "expected_type": "success",
                "response": "Lumen Blade - —ç—Ç–æ –ø–µ—Ä–µ–¥–æ–≤–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ä—É–∂–∏—è. –û–Ω–∞ —Å–æ–∑–¥–∞–µ—Ç –ª–µ–∑–≤–∏–µ –∏–∑ —á–∏—Å—Ç–æ–π —ç–Ω–µ—Ä–≥–∏–∏, —Å–ø–æ—Å–æ–±–Ω–æ–µ –ø—Ä–æ—Ä–µ–∑–∞—Ç—å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.",
                "evaluation": {
                    "correct": True,
                    "completeness": 0.88,
                    "is_refusal": False,
                    "keyword_coverage": 0.75,
                    "chunks_found": 4
                }
            },
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ—Ç–∫–∞–∑—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
            {
                "question_id": "unknown_01",
                "question": "–ö—Ç–æ —Ç–∞–∫–æ–π Xarn Velgor?",
                "category": "removed_entities",
                "expected_type": "failure",
                "response": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Xarn Velgor –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.",
                "evaluation": {
                    "correct": True,
                    "completeness": 1.0,
                    "is_refusal": True,
                    "keyword_coverage": 1.0,
                    "chunks_found": 0
                }
            },
            {
                "question_id": "unknown_02",
                "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ Synth Flux?",
                "category": "removed_entities",
                "expected_type": "failure",
                "response": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Synth Flux –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.",
                "evaluation": {
                    "correct": True,
                    "completeness": 1.0,
                    "is_refusal": True,
                    "keyword_coverage": 1.0,
                    "chunks_found": 0
                }
            },
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è)
            {
                "question_id": "unknown_04",
                "question": "–ö—Ç–æ —Ç–∞–∫–æ–π Darth Vader?",
                "category": "external_knowledge",
                "expected_type": "failure",
                "response": "Darth Vader - —ç—Ç–æ –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–º–Ω—ã–π –ª–æ—Ä–¥, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–∏–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–∏–ª–æ–π –∏ —á–µ—Ä–Ω–æ–π –±—Ä–æ–Ω–µ–π.",
                "evaluation": {
                    "correct": False,  # –ì–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è - –¥–æ–ª–∂–µ–Ω –±—ã–ª –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è
                    "completeness": 0.0,
                    "is_refusal": False,
                    "keyword_coverage": 0.0,
                    "chunks_found": 3
                }
            }
        ]
    }
    
    return demo_results

def print_analysis():
    """–í—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    results = create_demo_results()
    stats = results["statistics"]
    
    print("üéØ –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ¬´–ó–û–õ–û–¢–û–ì–û –ù–ê–ë–û–†–ê¬ª")
    print("="*60)
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {stats['overall_accuracy']:.1%}")
    print(f"  –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['total_questions']}")
    print(f"  –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['correct_answers']}")
    
    print(f"\n‚úÖ –ò–ó–í–ï–°–¢–ù–´–ï –¢–ï–ú–´ (–¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—á–∞—Ç—å):")
    success_stats = stats['success_questions']
    print(f"  –¢–æ—á–Ω–æ—Å—Ç—å: {success_stats['accuracy']:.1%}")
    print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_stats['correct']}/{success_stats['total']}")
    
    print(f"\n‚ùå –ù–ï–ò–ó–í–ï–°–¢–ù–´–ï –¢–ï–ú–´ (–¥–æ–ª–∂–Ω—ã –æ—Ç–∫–∞–∑—ã–≤–∞—Ç—å—Å—è):")
    failure_stats = stats['failure_questions']
    print(f"  –¢–æ—á–Ω–æ—Å—Ç—å: {failure_stats['accuracy']:.1%}")
    print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {failure_stats['correct']}/{failure_stats['total']}")
    
    print(f"\nüìÇ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    for category, cat_stats in stats['categories'].items():
        status = "‚úÖ" if cat_stats['accuracy'] >= 0.8 else "‚ö†Ô∏è" if cat_stats['accuracy'] >= 0.5 else "‚ùå"
        print(f"  {status} {category}: {cat_stats['accuracy']:.1%} ({cat_stats['correct']}/{cat_stats['total']})")
    
    print(f"\nüîç –ü–†–û–ë–õ–ï–ú–´ –ò –ù–ê–•–û–î–ö–ò:")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if stats['success_questions']['accuracy'] == 1.0:
        print("  ‚úÖ –û—Ç–ª–∏—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–º—ã")
    else:
        print("  ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–º—ã")
    
    if stats['failure_questions']['accuracy'] >= 0.8:
        print("  ‚úÖ –•–æ—Ä–æ—à–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–º—ã")
    elif stats['failure_questions']['accuracy'] >= 0.5:
        print("  ‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–º—ã")
    else:
        print("  ‚ùå –ü–ª–æ—Ö–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–º—ã (—Ä–∏—Å–∫ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π)")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = stats['categories']
    if categories['removed_entities']['accuracy'] == 1.0:
        print("  ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏")
    else:
        print("  ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏ (–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ–ø–æ–ª–Ω–∞—è)")
    
    if categories['external_knowledge']['accuracy'] < 0.5:
        print("  ‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –∑–Ω–∞–Ω–∏—è (—Ä–∏—Å–∫ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π)")
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if stats['overall_accuracy'] >= 0.9:
        print("  üéâ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
    elif stats['overall_accuracy'] >= 0.8:
        print("  üëç –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è")
    elif stats['overall_accuracy'] >= 0.7:
        print("  ‚ö†Ô∏è  –¢—Ä–µ–±—É—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤")
    else:
        print("  üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if failure_stats['accuracy'] < 0.8:
        print("  üîß –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–µ–º")
        print("  üîß –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤")
    
    if categories['external_knowledge']['accuracy'] < 0.8:
        print("  üîß –£—Å–∏–ª–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ '–ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∑–Ω–∞–Ω–∏—è'")
    
    print(f"\nüìà –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("  1. –†–∞—Å—à–∏—Ä–∏—Ç—å –∑–æ–ª–æ—Ç–æ–π –Ω–∞–±–æ—Ä –¥–æ 50+ –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("  2. –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞")
    print("  3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏")
    print("  4. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä")

if __name__ == "__main__":
    print_analysis()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    demo_results = create_demo_results()
    
    results_dir = Path("test_results")
    results_dir.mkdir(exist_ok=True)
    
    demo_file = results_dir / "golden_set_demo_results.json"
    with open(demo_file, 'w', encoding='utf-8') as f:
        json.dump(demo_results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –î–µ–º–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {demo_file}")

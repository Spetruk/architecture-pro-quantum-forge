#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ RAG-—Å–∏—Å—Ç–µ–º—ã
"""

import sys
import json
from pathlib import Path
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.append('./app')

from demo_knowledge_gaps import KnowledgeGapAnalyzer
from coverage_analyzer import CoverageAnalyzer  
from golden_questions import GoldenQuestionSet, GoldenTestRunner
from query_logger import QueryLogger

class ComprehensiveAnalyzer:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä RAG-—Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        self.gap_analyzer = KnowledgeGapAnalyzer()
        self.coverage_analyzer = CoverageAnalyzer()
        self.golden_set = GoldenQuestionSet()
        self.golden_runner = GoldenTestRunner()
        
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def run_comprehensive_analysis(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê RAG-–°–ò–°–¢–ï–ú–´")
        print("="*60)
        
        results = {
            'timestamp': None,
            'gap_analysis': {},
            'coverage_report': {},
            'golden_tests': {},
            'final_assessment': {},
            'recommendations': []
        }
        
        # 1. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
        print("\n1Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∑–Ω–∞–Ω–∏—è—Ö...")
        gap_results = self.gap_analyzer.test_knowledge_gaps()
        results['gap_analysis'] = gap_results
        
        # 2. –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        print("\n2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
        coverage_report = self.coverage_analyzer.generate_coverage_report()
        results['coverage_report'] = coverage_report
        
        # 3. –≠—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\n3Ô∏è‚É£ –≠—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        golden_results = self.golden_runner.run_golden_tests(
            search_function=self.gap_analyzer.search_knowledge
        )
        results['golden_tests'] = golden_results
        
        # 4. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        print("\n4Ô∏è‚É£ –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        final_assessment = self._generate_final_assessment(results)
        results['final_assessment'] = final_assessment
        
        # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self._generate_comprehensive_recommendations(results)
        results['recommendations'] = recommendations
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results['timestamp'] = coverage_report['timestamp']
        
        return results
    
    def _generate_final_assessment(self, results: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
        gap_metrics = results['gap_analysis']
        coverage_metrics = results['coverage_report']['summary']
        golden_metrics = results['golden_tests']['summary']
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –æ—Ü–µ–Ω–æ–∫
        coverage_score = (gap_metrics['successful'] / gap_metrics['total_queries']) * 100 if gap_metrics['total_queries'] > 0 else 0
        structure_score = min(100, (coverage_metrics['total_files'] / 30) * 100)  # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        golden_score = golden_metrics['total_score']
        
        # –î–µ—Ç–µ–∫—Ü–∏—è –ø—Ä–æ–±–µ–ª–æ–≤
        gaps_detected = len(coverage_metrics['main_gaps'])
        gap_detection_quality = golden_metrics['gap_detection_accuracy']
        
        # –û–±—â–∏–π –±–∞–ª–ª —Å–∏—Å—Ç–µ–º—ã
        overall_score = (coverage_score * 0.4 + structure_score * 0.2 + golden_score * 0.4)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∏—Å—Ç–µ–º—ã
        if overall_score >= 90:
            system_level = "–û—Ç–ª–∏—á–Ω—ã–π"
            level_description = "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É"
        elif overall_score >= 75:
            system_level = "–•–æ—Ä–æ—à–∏–π"  
            level_description = "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–±–æ–ª—å—à–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π"
        elif overall_score >= 60:
            system_level = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π"
            level_description = "–°–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π"
        else:
            system_level = "–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π"
            level_description = "–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
        
        assessment = {
            'overall_score': round(overall_score, 1),
            'system_level': system_level,
            'level_description': level_description,
            'component_scores': {
                'knowledge_coverage': round(coverage_score, 1),
                'content_structure': round(structure_score, 1),
                'golden_tests': round(golden_score, 1),
                'gap_detection': round(gap_detection_quality, 1)
            },
            'key_metrics': {
                'total_files': coverage_metrics['total_files'],
                'detected_gaps': gaps_detected,
                'query_success_rate': coverage_metrics['success_rate'],
                'golden_pass_rate': golden_metrics['pass_rate']
            },
            'strengths': [],
            'weaknesses': [],
            'critical_issues': []
        }
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω
        if coverage_score >= 80:
            assessment['strengths'].append("–í—ã—Å–æ–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤")
        if structure_score >= 80:
            assessment['strengths'].append("–•–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
        if golden_score >= 80:
            assessment['strengths'].append("–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        if gap_detection_quality >= 80:
            assessment['strengths'].append("–¢–æ—á–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∑–Ω–∞–Ω–∏—è—Ö")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω
        if coverage_score < 70:
            assessment['weaknesses'].append("–ù–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        if gaps_detected > 2:
            assessment['weaknesses'].append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {gaps_detected} –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∑–Ω–∞–Ω–∏—è—Ö")
        if golden_metrics['pass_rate'] < 75:
            assessment['weaknesses'].append("–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
        if gap_detection_quality < 70:
            assessment['weaknesses'].append("–ù–µ—Ç–æ—á–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –ø—Ä–æ–±–µ–ª–æ–≤")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if coverage_score < 50:
            assessment['critical_issues'].append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤")
        if gaps_detected > 5:
            assessment['critical_issues'].append("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
        if golden_score < 50:
            assessment['critical_issues'].append("–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        return assessment
    
    def _generate_comprehensive_recommendations(self, results: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        
        recommendations = []
        
        gap_metrics = results['gap_analysis']
        coverage_metrics = results['coverage_report']['summary']
        golden_metrics = results['golden_tests']
        assessment = results['final_assessment']
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º)
        if assessment['critical_issues']:
            for issue in assessment['critical_issues']:
                if "–ø–æ–∫—Ä—ã—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤" in issue:
                    recommendations.append({
                        'priority': '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø',
                        'category': '–ü–æ–∫—Ä—ã—Ç–∏–µ',
                        'issue': issue,
                        'action': '–†–∞—Å—à–∏—Ä–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π, –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                        'expected_impact': '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤'
                    })
                elif "–ø—Ä–æ–±–µ–ª–æ–≤" in issue:
                    recommendations.append({
                        'priority': '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø', 
                        'category': '–ö–æ–Ω—Ç–µ–Ω—Ç',
                        'issue': issue,
                        'action': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã',
                        'expected_impact': '–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–µ–ø—ã—Ö –∑–æ–Ω –±–æ—Ç–∞'
                    })
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–æ–±–µ–ª–∞–º
        if coverage_metrics['main_gaps']:
            recommendations.append({
                'priority': '–í–´–°–û–ö–ê–Ø',
                'category': '–ö–æ–Ω—Ç–µ–Ω—Ç',
                'issue': f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ: {', '.join(coverage_metrics['main_gaps'])}",
                'action': '–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —ç—Ç–∏—Ö —Å—É—â–Ω–æ—Å—Ç—è—Ö',
                'expected_impact': '–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤'
            })
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–µ—É—Å–ø–µ—à–Ω—ã–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–º —Ç–µ—Å—Ç–∞–º
        failed_golden = [e for e in golden_metrics['evaluations'] if not e['pass']]
        if failed_golden:
            failed_categories = list(set(e['category'] for e in failed_golden))
            recommendations.append({
                'priority': '–í–´–°–û–ö–ê–Ø',
                'category': '–ö–∞—á–µ—Å—Ç–≤–æ',
                'issue': f"–ù–µ—É—Å–ø–µ—à–Ω—ã–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: {', '.join(failed_categories)}",
                'action': '–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —ç—Ç–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö',
                'expected_impact': '–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤'
            })
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        structure_analysis = results['coverage_report']['structure_analysis']
        min_category = min(
            structure_analysis['category_distribution'].items(),
            key=lambda x: x[1]['count']
        )
        if min_category[1]['count'] < 5:
            recommendations.append({
                'priority': '–°–†–ï–î–ù–Ø–Ø',
                'category': '–°—Ç—Ä—É–∫—Ç—É—Ä–∞',
                'issue': f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{min_category[0]}' —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞–ª–æ —Ñ–∞–π–ª–æ–≤ ({min_category[1]['count']})",
                'action': '–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                'expected_impact': '–£–ª—É—á—à–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π'
            })
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        query_analysis = results['coverage_report']['query_analysis']
        if query_analysis.get('avg_metrics', {}).get('response_time_ms', 0) > 500:
            recommendations.append({
                'priority': '–°–†–ï–î–ù–Ø–Ø',
                'category': '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                'issue': f"–í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ ({query_analysis['avg_metrics']['response_time_ms']} –º—Å)",
                'action': '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–æ–≤',
                'expected_impact': '–£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã'
            })
        
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ)
        if assessment['overall_score'] >= 80:
            recommendations.append({
                'priority': '–ù–ò–ó–ö–ê–Ø',
                'category': '–†–∞–∑–≤–∏—Ç–∏–µ',
                'issue': '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ',
                'action': '–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π',
                'expected_impact': '–ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã'
            })
        
        return recommendations
    
    def print_comprehensive_report(self, results: Dict[str, Any]):
        """–ü–µ—á–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*80)
        print("üìä –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ RAG-–°–ò–°–¢–ï–ú–´")
        print("="*80)
        
        assessment = results['final_assessment']
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        print(f"\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –°–ò–°–¢–ï–ú–´: {assessment['overall_score']}/100")
        print(f"üìà –£—Ä–æ–≤–µ–Ω—å: {assessment['system_level']}")
        print(f"üí¨ {assessment['level_description']}")
        print()
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
        print("üìä –û–¶–ï–ù–ö–ò –ü–û –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú:")
        for component, score in assessment['component_scores'].items():
            emoji = "üü¢" if score >= 80 else "üü°" if score >= 60 else "üî¥"
            print(f"   {emoji} {component}: {score}/100")
        print()
        
        # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        print("üìà –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò:")
        metrics = assessment['key_metrics']
        print(f"   üìÅ –§–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ: {metrics['total_files']}")
        print(f"   üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤: {metrics['detected_gaps']}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤: {metrics['query_success_rate']:.1f}%")
        print(f"   üèÜ –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {metrics['golden_pass_rate']:.1f}%")
        print()
        
        # –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        if assessment['strengths']:
            print("üí™ –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´:")
            for strength in assessment['strengths']:
                print(f"   ‚úÖ {strength}")
            print()
        
        # –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        if assessment['weaknesses']:
            print("‚ö†Ô∏è  –°–õ–ê–ë–´–ï –°–¢–û–†–û–ù–´:")
            for weakness in assessment['weaknesses']:
                print(f"   ‚ö†Ô∏è  {weakness}")
            print()
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if assessment['critical_issues']:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for issue in assessment['critical_issues']:
                print(f"   üö® {issue}")
            print()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
        recommendations = results['recommendations']
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        critical_recs = [r for r in recommendations if r['priority'] == '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø']
        high_recs = [r for r in recommendations if r['priority'] == '–í–´–°–û–ö–ê–Ø']
        medium_recs = [r for r in recommendations if r['priority'] == '–°–†–ï–î–ù–Ø–Ø']
        
        if critical_recs:
            print("   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï:")
            for rec in critical_recs:
                print(f"      - {rec['action']}")
        
        if high_recs:
            print("   üî¥ –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢:")
            for rec in high_recs:
                print(f"      - {rec['action']}")
        
        if medium_recs:
            print("   üü° –°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢:")
            for rec in medium_recs:
                print(f"      - {rec['action']}")
        
        print("\n" + "="*80)
        print("‚úÖ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        print("="*80)
    
    def save_comprehensive_report(self, results: Dict[str, Any], filename: str = "comprehensive_analysis.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        analyzer = ComprehensiveAnalyzer()
        
        # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        results = analyzer.run_comprehensive_analysis()
        
        # –ü–µ—á–∞—Ç—å –æ—Ç—á–µ—Ç–∞
        analyzer.print_comprehensive_report(results)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        analyzer.save_comprehensive_report(results)
        
        print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—É—á–∏–ª–∞ –æ—Ü–µ–Ω–∫—É {results['final_assessment']['overall_score']}/100")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()

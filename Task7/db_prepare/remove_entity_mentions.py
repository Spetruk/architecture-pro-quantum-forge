#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–ª—é—á–µ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
–¶–µ–ª—å: —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è
"""

import os
import re
from pathlib import Path

def remove_mentions_from_file(file_path, entities_to_remove):
    """–£–¥–∞–ª—è–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        modified = False
        
        for entity in entities_to_remove:
            # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏, –∑–∞–º–µ–Ω—è—è –Ω–∞ –ø—Ä–æ–±–µ–ª
            pattern = re.compile(re.escape(entity), re.IGNORECASE)
            new_content = pattern.sub(" ", content)
            
            if new_content != content:
                content = new_content
                modified = True
        
        # –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        if modified:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {file_path}")
            return True
        
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    entities_to_remove = [
        "Void Core",
        "VoidCore", 
        "Xarn Velgor",
        "Synth Flux",
        "SynthFlux"
    ]
    
    # –ü–∞–ø–∫–∞ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
    knowledge_base_path = Path("knowledge_base")
    
    files_modified = 0
    total_files = 0
    
    print("üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
    print(f"üìã –¶–µ–ª–µ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏: {', '.join(entities_to_remove)}")
    print()
    
    # –û–±—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    for file_path in knowledge_base_path.rglob("*.txt"):
        total_files += 1
        
        if remove_mentions_from_file(file_path, entities_to_remove):
            files_modified += 1
    
    print()
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_files}")
    print(f"   –§–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ: {files_modified}")
    print(f"   –£–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π: {len(entities_to_remove)}")
    print()
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üìù –°–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ removed_entities.txt")

if __name__ == "__main__":
    main()

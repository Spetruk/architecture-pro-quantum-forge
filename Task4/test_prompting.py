"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫ –ø—Ä–æ–º–ø—Ç–∏–Ω–≥–∞
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ –º–µ–∂–¥—É –±–∞–∑–æ–≤—ã–º, few-shot –∏ chain-of-thought –ø–æ–¥—Ö–æ–¥–∞–º–∏
"""

import json
import time
from typing import List, Dict, Any
from app.rag_bot import RAGBot, RAGConfig
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class PromptingTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫ –ø—Ä–æ–º–ø—Ç–∏–Ω–≥–∞"""
    
    def __init__(self):
        self.config = RAGConfig(vector_db_path="../Task3/chroma_db")
        self.bot = RAGBot(self.config)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        self.test_questions = [
            "–ö—Ç–æ —Ç–∞–∫–æ–π Xarn Velgor?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ Synth Flux?",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Lumen Blade?",
            "–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è Aurelia Prime?",
            "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ Echo Wars?",
            "–ö—Ç–æ —Ç–∞–∫–∏–µ Wardens?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ –±–∏—Ç–≤–µ –Ω–∞ Krael",
            "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç Wardens?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ Void Core?",
            "–ö—Ç–æ —Ç–∞–∫–æ–π Arin Solara?"
        ]
        
        # –¢–µ—Ö–Ω–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.techniques = ["base", "few_shot", "chain_of_thought"]
    
    def test_single_question(self, question: str, technique: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π"""
        print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: '{question}' —Å —Ç–µ—Ö–Ω–∏–∫–æ–π '{technique}'")
        
        start_time = time.time()
        
        try:
            result = self.bot.generate_response(question, technique)
            
            end_time = time.time()
            response_time = end_time - start_time
            
            return {
                "question": question,
                "technique": technique,
                "response": result["response"],
                "response_time": response_time,
                "num_sources": result["num_sources"],
                "sources": result["sources"],
                "success": True
            }
            
        except Exception as e:
            end_time = time.time()
            response_time = end_time - start_time
            
            return {
                "question": question,
                "technique": technique,
                "response": f"–û—à–∏–±–∫–∞: {str(e)}",
                "response_time": response_time,
                "num_sources": 0,
                "sources": [],
                "success": False,
                "error": str(e)
            }
    
    def test_all_techniques(self, question: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Ö–Ω–∏–∫ –Ω–∞ –æ–¥–Ω–æ–º –≤–æ–ø—Ä–æ—Å–µ"""
        results = {}
        
        for technique in self.techniques:
            result = self.test_single_question(question, technique)
            results[technique] = result
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)
        
        return results
    
    def run_comprehensive_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫ –ø—Ä–æ–º–ø—Ç–∏–Ω–≥–∞")
        print("=" * 60)
        
        all_results = {}
        technique_stats = {tech: {"total_time": 0, "success_count": 0, "avg_sources": 0} for tech in self.techniques}
        
        for i, question in enumerate(self.test_questions, 1):
            print(f"\nüìù –í–æ–ø—Ä–æ—Å {i}/{len(self.test_questions)}: {question}")
            print("-" * 50)
            
            question_results = self.test_all_techniques(question)
            all_results[question] = question_results
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            for technique, result in question_results.items():
                technique_stats[technique]["total_time"] += result["response_time"]
                if result["success"]:
                    technique_stats[technique]["success_count"] += 1
                technique_stats[technique]["avg_sources"] += result["num_sources"]
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            self._print_question_results(question_results)
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        for technique in self.techniques:
            stats = technique_stats[technique]
            stats["avg_time"] = stats["total_time"] / len(self.test_questions)
            stats["avg_sources"] = stats["avg_sources"] / len(self.test_questions)
            stats["success_rate"] = stats["success_count"] / len(self.test_questions)
        
        return {
            "all_results": all_results,
            "technique_stats": technique_stats,
            "summary": self._generate_summary(technique_stats)
        }
    
    def _print_question_results(self, question_results: Dict[str, Any]):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        for technique, result in question_results.items():
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {technique.upper()}:")
            print(f"   –í—Ä–µ–º—è: {result['response_time']:.2f}—Å")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {result['num_sources']}")
            print(f"   –û—Ç–≤–µ—Ç: {result['response'][:100]}...")
            print()
    
    def _generate_summary(self, technique_stats: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        summary = "\nüìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø\n"
        summary += "=" * 50 + "\n"
        
        for technique, stats in technique_stats.items():
            summary += f"\nüîß {technique.upper()}:\n"
            summary += f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1%}\n"
            summary += f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['avg_time']:.2f}—Å\n"
            summary += f"   –°—Ä–µ–¥–Ω–µ–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {stats['avg_sources']:.1f}\n"
        
        return summary
    
    def save_results(self, results: Dict[str, Any], filename: str = "prompting_test_results.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def compare_responses(self, question: str):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫ –Ω–∞ –æ–¥–Ω–æ–º –≤–æ–ø—Ä–æ—Å–µ"""
        print(f"\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –û–¢–í–ï–¢–û–í –ù–ê –í–û–ü–†–û–°: {question}")
        print("=" * 60)
        
        results = self.test_all_techniques(question)
        
        for technique, result in results.items():
            print(f"\nü§ñ {technique.upper()}:")
            print("-" * 30)
            print(f"–í—Ä–µ–º—è: {result['response_time']:.2f}—Å")
            print(f"–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {result['num_sources']}")
            print(f"–û—Ç–≤–µ—Ç:")
            print(result['response'])
            print()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–•–ù–ò–ö –ü–†–û–ú–ü–¢–ò–ù–ì–ê")
    print("=" * 50)
    
    tester = PromptingTester()
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("2. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫ –Ω–∞ –æ–¥–Ω–æ–º –≤–æ–ø—Ä–æ—Å–µ")
    print("3. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
    
    if choice == "1":
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        results = tester.run_comprehensive_test()
        print(results["summary"])
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        save_choice = input("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª? (y/n): ").strip().lower()
        if save_choice == 'y':
            tester.save_results(results)
    
    elif choice == "2":
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–º –≤–æ–ø—Ä–æ—Å–µ
        question = input("\n–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ").strip()
        if question:
            tester.compare_responses(question)
        else:
            print("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –≤–≤–µ–¥–µ–Ω")
    
    elif choice == "3":
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\nüéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("–í–≤–µ–¥–∏—Ç–µ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        
        while True:
            question = input("\n‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
            
            if question.lower() in ['quit', 'exit', '–≤—ã—Ö–æ–¥']:
                break
            
            if question:
                technique = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É (base/few_shot/chain_of_thought): ").strip()
                if technique not in tester.techniques:
                    technique = "base"
                
                result = tester.test_single_question(question, technique)
                print(f"\nü§ñ –û—Ç–≤–µ—Ç ({technique}):")
                print(result["response"])
                print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result['response_time']:.2f}—Å")
                print(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {result['num_sources']}")
    
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    main()


